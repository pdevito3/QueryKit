// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QueryKit.WebApiTestProject.Database;

#nullable disable

namespace QueryKit.WebApiTestProject.Migrations
{
    [DbContext(typeof(TestingDbContext))]
    [Migration("20240622235558_TestingSetup")]
    partial class TestingSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Authors.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id")
                        .HasName("pk_author");

                    b.HasIndex("RecipeId")
                        .IsUnique()
                        .HasDatabaseName("ix_author_recipe_id");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Ingredients.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measure");

                    b.Property<int>("MinimumQuality")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_quality");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("QualityLevel")
                        .HasColumnType("bigint")
                        .HasColumnName("quality_level");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id")
                        .HasName("pk_ingredients");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_ingredients_recipe_id");

                    b.ToTable("ingredients", (string)null);
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Ingredients.IngredientPreparation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_ingredient_preparations");

                    b.HasIndex("IngredientId")
                        .HasDatabaseName("ix_ingredient_preparations_ingredient_id");

                    b.ToTable("ingredient_preparations", (string)null);
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Recipes.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("DateOfOrigin")
                        .HasColumnType("date")
                        .HasColumnName("date_of_origin");

                    b.Property<string>("Directions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("directions");

                    b.Property<bool>("HaveMadeItMyself")
                        .HasColumnType("boolean")
                        .HasColumnName("have_made_it_myself");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid?>("SecondaryId")
                        .HasColumnType("uuid")
                        .HasColumnName("secondary_id");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.ComplexProperty<Dictionary<string, object>>("CollectionEmail", "QueryKit.WebApiTestProject.Entities.Recipes.Recipe.CollectionEmail#EmailAddress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("collection_email");
                        });

                    b.HasKey("Id")
                        .HasName("pk_recipes");

                    b.ToTable("recipes", (string)null);
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.TestingPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<int?>("BirthMonth")
                        .HasColumnType("integer")
                        .HasColumnName("birth_month");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool?>("Favorite")
                        .HasColumnType("boolean")
                        .HasColumnName("favorite");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<DateTimeOffset?>("SpecificDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("specific_date");

                    b.Property<DateTime>("SpecificDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("specific_date_time");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Authors.Author", b =>
                {
                    b.HasOne("QueryKit.WebApiTestProject.Entities.Recipes.Recipe", "Recipe")
                        .WithOne("Author")
                        .HasForeignKey("QueryKit.WebApiTestProject.Entities.Authors.Author", "RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_recipes_recipe_id");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Ingredients.Ingredient", b =>
                {
                    b.HasOne("QueryKit.WebApiTestProject.Entities.Recipes.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ingredients_recipes_recipe_id");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Ingredients.IngredientPreparation", b =>
                {
                    b.HasOne("QueryKit.WebApiTestProject.Entities.Ingredients.Ingredient", null)
                        .WithMany("Preparations")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("fk_ingredient_preparations_ingredients_ingredient_id");
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.TestingPerson", b =>
                {
                    b.OwnsOne("QueryKit.WebApiTestProject.Entities.Address", "PhysicalAddress", b1 =>
                        {
                            b1.Property<Guid>("TestingPersonId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_country");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_line1");

                            b1.Property<string>("Line2")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_line2");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_address_state");

                            b1.HasKey("TestingPersonId");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("TestingPersonId")
                                .HasConstraintName("fk_people_people_id");
                        });

                    b.Navigation("PhysicalAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Ingredients.Ingredient", b =>
                {
                    b.Navigation("Preparations");
                });

            modelBuilder.Entity("QueryKit.WebApiTestProject.Entities.Recipes.Recipe", b =>
                {
                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
